#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0, rgba8) uniform writeonly image2D result_image;

struct Ray
{
	vec3 origin;
	vec3 dir;
};

struct Sphere
{
	int  id;
	vec3  origin;
	vec3  color;
	float specular;
	float radius;
};

struct Plane
{
	int   id;
	vec3  normal;
	vec3  color;
	float specular;
	float width;
};

struct Camera
{
	vec3 pos;
	vec3 dir;

	vec3 right;
	vec3 up;
};

// layout (set = 0, binding = 1) buffer SceneData
// {
// 	Sphere spheres[];
// };

layout (push_constant) uniform FrameData
{
	float aspect_ratio;

	vec3  light_pos;

	Camera camera;
};

const float MAX_DISTANCE = 1000.0;

const uint SPHERE_COUNT = 2;
const uint PLANE_COUNT  = 1;

const vec3 BACKGROUND_COLOR = vec3(0.2, 0.2, 0.2);

const Sphere spheres[] =
{
	{ 0, vec3(1.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), 32.0, 1.0 },
	{ 1, vec3(32.0, 12.0, 0.0), vec3(0.0, 1.0, 0.0), 32.0, 12.0 }
};

const Plane planes[] =
{
	{ 2, vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), 32.0, 20.0 }
};

float calc_sphere_intersect(in Ray ray, in Sphere sphere)
{
	const vec3  oc = ray.origin - sphere.origin;
	const float b  = 2.0 * dot(oc, ray.dir);
	const float c  = dot(oc, oc) - sphere.radius * sphere.radius;
	const float h  = b * b - 4.0 * c;

	if (h < 0.0)
	{
		return -1.0;
	}

	const float t = (-b - sqrt(h)) / 2.0;

	return t;
}

float calc_plane_intersect(in Ray ray, in Plane plane)
{
	float d = dot(ray.dir, plane.normal);

	if (d == 0.0)
	{
		return 0.0;
	}

	float t = -(plane.width + dot(ray.origin, plane.normal)) / d;

	return max(t, 0.0);
}

vec3 calc_sphere_normal(in vec3 pos, in Sphere sphere)
{
	return (pos - sphere.origin) / sphere.radius;
}

vec3 calc_fog(in float dist, in vec3 color)
{
	return mix(color, vec3(0.0, 0.0, 0.0), clamp(dist / 200.0, 0.0, 1.0));
}

float calc_shadow(in Ray ray, in uint object_id, in float dist_to_light)
{
	for (uint i = 0; i < SPHERE_COUNT; ++i)
	{
		if (spheres[i].id == object_id)
		{
			continue;
		}

		const float dist_to_sphere = calc_sphere_intersect(ray, spheres[i]);

		if ((dist_to_sphere > 0) && (dist_to_sphere < dist_to_light))
		{
			return 0.0;
		}
	}

	for (uint i = 0; i < PLANE_COUNT; ++i)
	{
		if (planes[i].id == object_id)
		{
			continue;
		}

		const float dist_to_plane = calc_plane_intersect(ray, planes[i]);

		if ((dist_to_plane > 0) && (dist_to_plane < dist_to_light))
		{
			return 0.0;
		}
	}

	return 1.0;
}

int intersect_objects(in Ray ray, inout float dist)
{
	int id = -1;

	for (int i = 0; i < SPHERE_COUNT; ++i)
	{
		const float sphere_dist = calc_sphere_intersect(ray, spheres[i]);

		if (sphere_dist > 0 && sphere_dist < dist)
		{
			id   = spheres[i].id;
			dist = sphere_dist;
		}
	}

	for (int i = 0; i < PLANE_COUNT; ++i)
	{
		const float plane_dist = calc_plane_intersect(ray, planes[i]);

		if (plane_dist > 0 && plane_dist < dist)
		{
			id   = planes[i].id;
			dist = plane_dist;
		}
	}

	return id;
}

vec4 trace(in Ray ray)
{
	float dist = MAX_DISTANCE;

	const int object_id = intersect_objects(ray, dist);

	vec3 color = BACKGROUND_COLOR;

	if (object_id < 0)
	{
		return vec4(0.0, 0.0, 0.0, 1.0);
	}

	const vec3  pos = ray.origin + dist * ray.dir;
	const vec3  light_vec = normalize(light_pos - pos);

	for (uint i = 0; i < SPHERE_COUNT; ++i)
	{
		if (spheres[i].id == object_id)
		{
			const vec3  normal = calc_sphere_normal(pos, spheres[i]);

			const float dist_to_light = length(light_pos - pos);

			const vec3 diffuse = spheres[i].color * max(dot(normal, light_vec), 0.0);

			color = diffuse;

			const Ray shadow_ray = { pos, light_vec };

			color *= calc_shadow(shadow_ray, spheres[i].id, dist_to_light);

			color = calc_fog(dist, color);

			return vec4(color, 1.0);
		}
	}

	for (uint i = 0; i < PLANE_COUNT; ++i)
	{
		if (planes[i].id == object_id)
		{
			const float dist_to_light = length(light_pos - pos);

			const vec3 diffuse = planes[i].color * max(dot(planes[i].normal, light_vec), 0.0);

			color = diffuse;

			const Ray shadow_ray = { pos, light_vec };

			color *= calc_shadow(shadow_ray, planes[i].id, dist_to_light);

			color = calc_fog(dist, color);

			return vec4(color, 1.0);
		}
	}

	return vec4(color, 1.0);
}

void main()
{
	const ivec2 dim = imageSize(result_image);
	const vec2  uv  = vec2(gl_GlobalInvocationID.xy) / dim;

	const vec2 trans = 2.0 * uv - vec2(1.0);

    vec3 dir = camera.dir + camera.right * trans.x + camera.up * trans.y;

    dir *= vec2(aspect_ratio, 1.0).xyx;

    const Ray primary_ray = { camera.pos, normalize(dir) };

	const vec4 color = trace(primary_ray);

	imageStore(result_image, ivec2(gl_GlobalInvocationID.xy), color);
}
