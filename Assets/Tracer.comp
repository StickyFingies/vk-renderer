/**
 * @author Seth Traman
 * @date   2019 03 04
 *
 * @file   Tracer.comp
 * @brief  Updated raytracing compute shader
 */



#version 450

#extension GL_ARB_separate_shader_objects : enable



/**
 * @struct Camera
 *
 * @brief Represents the viewport which is recieving light from the scene
 */
struct Camera
{
	/// @brief Position of the camera in world-space
	vec3 pos;

	/// @brief Normalized direction vector that the camera is viewing
	vec3 dir;

	/// @brief Normalized right-facing direction relative to view direction
	vec3 right;

	/// @brief Normalized up-facing direction relative to view direction
	vec3 up;
};

/**
 * @struct Ray
 *
 * @brief A three-dimentional half-line which may intersect with other geometric primitives
 */
struct Ray
{
	/// @brief Position where the ray originates in world-space
	vec3 origin;

	/// @brief Normalized direction vector that the ray is shooting
	vec3 dir;
};

const uint MAT_TYPE_DIFFUSE    = 0; // Diffuse and specular
const uint MAT_TYPE_DIELECTRIC = 1; // Glass, water

/**
 * @struct Material
 *
 * @brief Standard surface material smilar to UE4's metallic PBR pipeline
 */
struct Material
{
	/// @brief Base color of object
	vec3 albedo;

	/// @brief Color emissed by object regardless of lighting
	vec3 emissive;

	/// @brief How rough the surface of the material is
	float roughness;

	float metalness;

	/// @brief Determines how object-light interactions should be handled
	uint type;
};

/**
 * @struct Intersection
 *
 * @brief Information about intersection between a ray and a geometric primitive
 *
 * @see Ray
 */
struct Intersection
{
	Material mat;

	/// @brief Distance from ray origin which intersection occured
	float t;

	/// @brief Position of ray intersection in world-space
	vec3 P;

	/// @brief Normal of surface patch which ray collided with
	vec3 N;
};

/**
 * @struct Sphere
 *
 * @brief Like a ball, but somehow rounder
 */
struct Sphere
{
	Material mat;

	/// @brief Position of sphere in world-space
	vec3 P;

	/// @brief Radius of the sphere
	float r;
};

/**
 * @struct Plane
 *
 * @brief Flatt primitive which stretches into the   v o i d
 */
struct Plane
{
	Material mat;

	vec3 N;

	float len;
};

struct Triangle
{
	vec3 v0;
	vec3 v1;
	vec3 v2;
};



/////
// Shader Communication
/////



layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0, rgba8) uniform writeonly image2D render_target;

layout (std430, set = 0, binding = 1) buffer SceneData
{
	Triangle tris[];
};

layout (push_constant) uniform FrameData
{
	/// @brief Width-height ratio of rendering media
	float aspect_ratio;

	/// @brief Value to seed the pseudo-RNG
	float seed;

	/// @brief Position of the light source in world space
	/// @deprecated No longer used
	vec3 light_pos;

	/// @brief Camera viewport object
	/// @see Camera
	Camera camera;
};



/////
// Constants
/////



const float PI      = 3.14159265359;
const float EPSILON = 1e-3;

const float DEPTH    = 4;
const float SAMPLES  = 4;

const uint SPHERE_COUNT   = 4;
const uint PLANE_COUNT    = 5;
const uint TRIANGLE_COUNT = 1;

const Material matte_white = { vec3(1.0, 1.0, 1.0),    vec3(0.0), 0.3, 0.7, MAT_TYPE_DIFFUSE};
const Material matte_red   = { vec3(0.75, 0.25, 0.25), vec3(0.0), 0.4, 0.0, MAT_TYPE_DIFFUSE };
const Material matte_green = { vec3(0.25, 0.75, 0.25), vec3(0.0), 0.4, 0.0, MAT_TYPE_DIFFUSE };
const Material matte_blue  = { vec3(0.25, 0.25, 0.75), vec3(0.0), 0.4, 0.0, MAT_TYPE_DIFFUSE };

const Material plastic = { vec3(0.25, 0.25, 0.75), vec3(0.0), 0.3,  0.6, MAT_TYPE_DIFFUSE };
const Material mirror  = { vec3(1.0, 0.5, 0.5), vec3(0.0),    0.0,  1.0, MAT_TYPE_DIFFUSE};
const Material glass   = { vec3(1.0, 1.0, 1.0), vec3(0.0),    0.42, 0.0, MAT_TYPE_DIELECTRIC };
const Material light   = { vec3(1.0, 1.0, 1.0), vec3(128.0),  0.6,  0.0, MAT_TYPE_DIFFUSE };

Sphere spheres[SPHERE_COUNT] =
{
	{ glass, vec3(42.0, 16.0, 12.0), 16.0 },
	{ light, vec3(0.0, 96.0, 0.0), 12.0 },
	{ mirror, vec3(-32.0, 24.0, 24.0), 24.0 },
	{ plastic, vec3(-24.0, 11.0, -48.0), 11.0 }
};

Plane planes[PLANE_COUNT] =
{
	{ matte_white, vec3(0.0, 1.0, 0.0),  0.0 },
	{ matte_white, vec3(0.0, -1.0, 0.0), 128.0 },
	{ matte_red,   vec3(1.0, 0.0, 0.0),  64.0 },
	{ matte_green, vec3(0.0, 0.0, -1.0), 64.0 },
	{ matte_blue,  vec3(-1.0, 0.0, 0.0), 64.0 }
};



/////
// Functions
/////



float rand_salt = 0.0;

vec2 coords = { 0.0, 0.0 };

float rand()
{
    const vec2 K1 =
	{
        23.14069263277926,
        2.665144142690225
	};

    return fract(cos(dot((coords + ++rand_salt) * 5.0, K1)) * 12345.6789);
}

float max3(in vec3 e)
{
	return max(max(e.x, e.y), e.z);
}

float when_eq(in float x, in float y)
{
	return 1.0 - abs(sign(x - y));
}

float when_neq(in float x, in float y)
{
	return abs(sign(x - y));
}

vec3 when_gt(in vec3 x, in vec3 y)
{
	return max(sign(x - y), 0.0);
}

vec3 jitter(in vec3 d, in float phi, in float sina, in float cosa)
{
	const vec3 w = normalize(d);
	const vec3 u = normalize(cross(w.yzx, w));
	const vec3 v = cross(w, u);

	return (u * cos(phi) + v * sin(phi)) * sina + w * cosa;
}

float schlick(in float cosine, in float ior)
{
	float r0 = (1.0 - ior) / (1.0 + ior);

	r0 = r0 * r0;

	return r0 + (1.0 - r0) * pow(1.0 - cosine, 5.0);
}

vec3 fresnel_schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float distribution_ggx(in vec3 N, in vec3 H, in float roughness)
{
    const float a      = roughness * roughness;
    const float a2     = a * a;
    const float NdotH  = max(dot(N, H), 0.0);
    const float NdotH2 = NdotH * NdotH;

    const float num   = a2;

	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float geometry_schlick_ggx(in float NdotV, in float roughness)
{
    const float r = (roughness + 1.0);
    const float k = (r*r) / 8.0;

    const float num   = NdotV;
    const float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
float geometry_smith(in vec3 N, in vec3 V, in vec3 L, in float roughness)
{
    const float NdotV = max(dot(N, V), 0.0);
    const float NdotL = max(dot(N, L), 0.0);
    const float ggx2  = geometry_schlick_ggx(NdotV, roughness);
    const float ggx1  = geometry_schlick_ggx(NdotL, roughness);

    return ggx1 * ggx2;
}

float calc_sphere_intersect(in Ray ray, in Sphere sphere)
{
	const vec3  oc = ray.origin - sphere.P;
	const float b  = 2.0 * dot(oc, ray.dir);
	const float c  = dot(oc, oc) - sphere.r * sphere.r;
	const float h  = b * b - 4.0 * c;

	if (h < 0.0)
	{
		return -1.0;
	}

	const float t = (-b - sqrt(h)) / 2.0;

	return t;
}

float calc_plane_intersect(in Ray ray, in Plane plane)
{
	float d = dot(ray.dir, plane.N);

	float dist = -(plane.len + dot(ray.origin, plane.N)) / d;

	return when_neq(d, 0.0) * max(dist, 0.0);
}

float calc_tri_intersect(in Ray ray, in Triangle tri)
{
	const vec3 v0v1 = tri.v1 - tri.v0;
	const vec3 v0v2 = tri.v2 - tri.v0;
	const vec3 pvec = cross(ray.dir, v0v2);

	const float determinant = dot(v0v1, pvec);

	if (determinant < EPSILON)
	{
		return -1.0;
	}

	const float inverse_determinant = 1 / determinant;

	const vec3  tvec = ray.origin - tri.v0;
	const float u    = dot(tvec, pvec) * inverse_determinant;

	if (u < 0 || u > 1)
	{
		return -1.0;
	}

	const vec3  qvec = cross(tvec, v0v1);
	const float v    = dot(ray.dir, qvec) * inverse_determinant;

	if (v < 0 || u + v > 1)
	{
		return -1.0;
	}

	return dot(v0v2, qvec) * inverse_determinant;
}

bool trace_ray(in Ray ray, inout Intersection intersect)
{
	bool found = false;

	for (uint i = 0; i < tris.length(); ++i)
	{
		const float t = calc_tri_intersect(ray, tris[i]);

		if ((t > EPSILON) && (t < intersect.t + EPSILON))
		{
			intersect.t = t;

			intersect.mat = mirror;
			intersect.P   = ray.origin + t * ray.dir;

			const vec3 u = tris[i].v1 - tris[i].v0;
			const vec3 v = tris[i].v2 - tris[i].v0;

			intersect.N = vec3((u.y * v.z) - (u.z * v.y), (u.z * v.x) - (u.x * v.z), (u.x * v.y) - (u.y * v.x));

			found = true;
		}
	}

	for (uint i = 0; i < SPHERE_COUNT; ++i)
	{
		const float t = calc_sphere_intersect(ray, spheres[i]);

		if ((t > EPSILON) && (t < intersect.t + EPSILON))
		{
			intersect.mat = spheres[i].mat;

			intersect.t = t;
			intersect.P = ray.origin + t * ray.dir;
			intersect.N = (intersect.P - spheres[i].P) / spheres[i].r;

			found = true;
		}
	}

	for (uint i = 0; i < PLANE_COUNT; ++i)
	{
		const float t = calc_plane_intersect(ray, planes[i]);

		if ((t > EPSILON) && (t < intersect.t - EPSILON))
		{
			intersect.mat = planes[i].mat;

			intersect.t = t;
			intersect.P = ray.origin + t * ray.dir;
			intersect.N = planes[i].N;

			found = true;
		}
	}

	return found;
}

vec3 radiance(in Ray ray)
{
	vec3 acc  = { 0.0, 0.0, 0.0 };
	vec3 mask = { 1.0, 1.0, 1.0 };

	for (uint depth = 0; depth < DEPTH; ++depth)
	{
		// Clamp fireflies
		acc = clamp(acc, vec3(0.0), vec3(1.0));

		Intersection intersect;
		intersect.t = 3000 / pow(depth + 1, 2);
		if (trace_ray(ray, intersect) == false) break;

		const Material mat = intersect.mat;

		switch (mat.type)
		{
			case MAT_TYPE_DIFFUSE:
			{
				const float r2 = rand();
				const vec3  d  = jitter(intersect.N, 2.0 * PI * rand(), sqrt(r2), sqrt(1.0 - r2)) * (1.0 - mat.metalness);

				vec3 e = { 0.0, 0.0, 0.0 };

				for (uint i = 0; i < SPHERE_COUNT; ++i)
				{
					Sphere s = spheres[i];

					if (s.mat.emissive == vec3(0.0)) continue;

					const float t = length(s.P - intersect.P) - s.r;

					const vec3  l0        = s.P - intersect.P;
					const float cos_a_max = sqrt(1.0 - clamp(s.r * s.r / dot(l0, l0), 0.0, 1.0));
					const float cosa      = mix(cos_a_max, 1.0, rand());
					const vec3  L         = jitter(l0, 2.0 * PI * rand(), sqrt(1.0 - cosa * cosa), cosa);

					Intersection shadow_intersection;
					shadow_intersection.t = t;
					if (trace_ray(Ray(intersect.P, L), shadow_intersection) == false)
					{
						vec3 attenuation = s.mat.emissive * 1.0 / pow(t / s.r + 1.0, 2);

						// Clamp light distance
						attenuation = (attenuation - 0.001) / (1 - 0.001);
    					attenuation = max(attenuation, 0);

						vec3 F0 = vec3(0.04);
						F0 = mix(F0, mat.albedo, mat.metalness);

						const vec3 V = normalize(camera.pos - intersect.P);
						const vec3 H = normalize(V + L);

						// Cook-Torrance BRDF
						const float NDF = distribution_ggx(intersect.N, H, mat.roughness);
						const float G   = geometry_smith(intersect.N, V, L, mat.roughness);
						const vec3  F   = fresnel_schlick(max(dot(H, V), 0.0), F0);

						const vec3 kS = F;
						vec3 kD = vec3(1.0) - kS;
						kD *= 1.0 - mat.metalness;

						const vec3  numerator   = NDF * G * F;
						const float denominator = 4.0 * max(dot(intersect.N, V), 0.0) * max(dot(intersect.N, L), 0.0);
						const vec3  specular    = numerator / max(denominator, 0.001);

						// Add to radiance
						const float NdotL = max(dot(intersect.N, L), 0.0);
						e += (kD * mat.albedo / PI + specular) * attenuation * NdotL;
					}
				}

				// Normalize emissive value if present, otherwise set to zero
				const vec3 emissive = (when_gt(mat.emissive, vec3(0.0)) == vec3(1.0) ? normalize(mat.emissive) : vec3(0.0));

				acc  += mask * (emissive + e);
				mask *= mat.albedo;
				ray   = Ray(intersect.P, normalize(reflect(ray.dir, intersect.N) + d));
				break;
			}
			case MAT_TYPE_DIELECTRIC:
			{
				acc += mat.emissive * mask;
				mask *= mat.albedo;

				vec3  normal;
				float nint;
				float cosine;

				// if (dot(intersect.N, ray.dir) > 0.0)
				// {
					// normal = -intersect.N;
					// nint = 1.0 / mat.roughness;
					// cosine = nint * dot(ray.dir, intersect.N) / length(ray.dir);
				// }
				// else
				// {
					normal = intersect.N;
					nint   = mat.roughness;
					cosine = -dot(ray.dir, intersect.N) / length(ray.dir);
				// }

				const vec3 reflected = reflect(ray.dir, intersect.N);
				const vec3 refracted = refract(ray.dir, normal, nint);

				const float probability_of_reflection = (refracted == vec3(0.0)) ? 1.0 : schlick(cosine, mat.roughness);

				ray = Ray(intersect.P, normalize(rand() < probability_of_reflection ? reflected : refracted));
			}
		}

		const float probality_of_termination = max3(mask);

		if (rand() > probality_of_termination) break;

		mask *= 1.0 / probality_of_termination;
	}

	return acc;
}



void main()
{
	// Compute camera coordinates and ray direction

	const ivec2 render_target_size = imageSize(render_target);

	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / render_target_size;

	rand_salt = uv.y / uv.x + seed;
	coords = uv;

	const vec2 trans = 2.0 * uv - vec2(1.0, 1.0);

    vec3 dir = (camera.dir + camera.right * trans.x + camera.up * trans.y) * vec2(aspect_ratio, 1.0).xyx;

	// Shoot rays and compute final pixel color

	Ray primary_ray = { camera.pos, normalize(dir) };

	vec3 accum = { 0.0, 0.0, 0.0 };

	for (uint i = 0; i < SAMPLES; ++i)
	{
		accum += radiance(primary_ray);
	}

	// Store our traced pixel

	accum.rgb /= SAMPLES;

	accum.rgb = accum.rgb / (accum.rgb + vec3(1.0));
	accum.rgb = pow(accum.rgb, vec3(1.0 / 2.2));

	vec3 dithered_color = accum + rand() / 64.0;

	imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(dithered_color, 1.0));
}
